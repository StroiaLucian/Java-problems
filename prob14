Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Follow up:

Could you solve this problem without using the library's sort function?
Could you come up with a one-pass algorithm using only O(1) constant space?
 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]


class Solution {
    public void sortColors(int[] nums) {
        quicksort(nums, 0,nums.length-1);
    }
    public void quicksort(int[] nums, int begin, int end){
        if(end<=begin) return;
        int pivot=partition(nums,begin,end);
        quicksort(nums,begin,pivot-1);
        quicksort(nums,pivot+1,end);
    }
    public int partition(int[] nums, int begin, int end){
        int pivot=end;
        int c=begin;
        int temp=0;
        for(int i=begin;i<end;i++){
            if(nums[i]< nums[pivot]){
                temp= nums[c];
                nums[c]=nums[i];
                nums[i]= temp;
                c++;
            }
        }
        temp=nums[pivot];
        nums[pivot]=nums[c];
        nums[c]=temp;
        return c;
    }
}
