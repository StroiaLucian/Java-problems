Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.


class Solution {
    
    public int maxArea(int[] height) {
    int max=0;
    int n=0;
    int ce=0;
    for(int i=0;i<height.length-1;i++)
    {
        for(int j=i+1;j<height.length;j++)
        {
            if(height[j]<=height[i]){
                ce=height[j];}
            else ce=height[i];
            n=j-i; // multiplication number;
            if(n<=0) n=1;
            if(max<=ce*n) max= ce*n;
        }
    }
        
    return max;
    }
}
