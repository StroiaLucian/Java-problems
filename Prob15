Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.



class Solution {
    public boolean exist(char[][] board, String word) {
    for(int i=0;i<board.length;i++){
        for(int j=0;j<board[0].length;j++){
            if(board[i][j]==word.charAt(0) && findWord(i,j,0,board,word)) // daca gasim prima litera a cuvantului cautat in board-ul nostru si dupa daca functia findWord gaseste cuvantul pornind de la pozitia i,j, atunci returnam true;
                return true;
        }
    }
        return false;// caz contrar. ajunge aici motiv pentru care returnam false cum ca nu a gasit cuvantul cautat.
    }
    public boolean findWord(int i, int j, int counter, char[][] board, String word){
        if(counter==word.length()) return true;
        if(i<0|| j<0 || i>=board.length || j>=board[0].length || board[i][j]!=word.charAt(counter)) return false; // returnam false cand se incearca cautarea in afara matricei. (indicii de i si //j depasesc in mod negativ/pozitiv marginile matricei).
    char reminder=board[i][j];
    board[i][j]=' ';
    
    boolean rezultat= findWord(i-1,j,counter+1,board,word) || findWord(i+1,j,counter+1,board,word) || findWord(i,j-1,counter+1,board,word) || findWord(i,j+1,counter+1,board,word);
     
    board[i][j]=reminder;
    return rezultat;
    }
}
