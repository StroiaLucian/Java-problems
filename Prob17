Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

Follow up: Could you write an algorithm with O(log n) runtime complexity?

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]


class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] aux= new int[nums.length];
        int[] rez= new int[2];
        int j=0;
        int ok=0;
        for(int i=0;i<nums.length;i++)
        {
        if(nums[i]==target) {
            aux[j]=i;
            j++;
            ok=1;
        }
        }
        if(j!=0) j--;
        if(ok==0){
        rez[0]=-1;
        rez[1]=-1;
            return rez;
        }else {
        rez[0]=aux[0];
        rez[1]=aux[j];
             return rez;
        }
       
    }
}
